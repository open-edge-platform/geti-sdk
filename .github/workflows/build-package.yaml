name: Build and publish package

on:
  workflow_call: # Make workflow reusable
    inputs:
      enable_dev_dependencies:
        required: false
        type: string
      runner:
        required: true
        type: string
    secrets:
      PYPI_USER:
        required: true
      PYPI_PASSWORD:
        required: true
      PYPI_HOST:
        required: true

env:
  PYPI_USER: ${{ secrets.PYPI_USER }}
  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  PYPI_HOST: ${{ secrets.PYPI_HOST }}
  ENABLE_DEV_DEPENDENCIES: ${{ inputs.enable_dev_dependencies }}

permissions:
  contents: read

jobs:
  build_sdk:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit

      - name: Checkout code with caching for Git LFS
        uses: nschloe/action-cached-lfs-checkout@f46300cd8952454b9f0a21a3d133d4bd5684cfc2 # v1.2.3

      - name: Set up Python
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: 3.12

      - name: Install package with dev and notebook requirements
        run: |
          python -m pip install --upgrade pip

          if [[ $ENABLE_DEV_DEPENDENCIES = 1 ]]; then
          pip install ".[dev,notebooks]" --pre
          else
          pip install ".[dev,notebooks]"
          fi

      - name: Install build tools
        run: pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package contents
        run: twine check dist/*

      - name: Upload wheel and source files as github artifact
        # Publish the built wheel and source tarball to github
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
        if: ${{ always() }}
        with:
          name: geti_sdk
          path: dist

      - name: Publish SDK package to pypi
        run: |
          if [[ $PYPI_HOST = "test.pypi.org" ]]; then
            twine upload -r testpypi dist/* -u $PYPI_USER -p $PYPI_PASSWORD
          else
            twine upload dist/* -u $PYPI_USER -p $PYPI_PASSWORD
          fi


      - name: Clean up dist directory if it was created
        if: ${{ always() }}
        run: |
          if OUTPUT=$(ls | grep -c dist)
          then
            echo "Cleaning up dist directory"
            rm -r dist
          fi
